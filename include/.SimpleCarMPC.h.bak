#ifndef SIMPLE_CAR_MPC_H
#define SIMPLE_CAR_MPC_H

#include <acado_toolkit.hpp>
#include <acado_gnuplot.hpp>
#include <math.h>

USING_NAMESPACE_ACADO

class SimpleCarMPC{
    public:        
        SimpleCarMPC();
        void solveMPC(double time);
        void PathTracking();

    private:
        // MPC function setting
        const double ts = 0.0; // Start time
        const double te = 1.0; // End time
        const int numSteps = 10; // N = 10(time horizon)

        // // Output trajectory setting
        const int totalSteps = 577; // Number of steps in reference trajectory
        const int tfinal = 40; // Final time of reference trajectory

        // Wheelbase
        const double wheelbase = 1.0;

        DifferentialEquation f; ///< Differential equation

        // Variables
        DifferentialState x;
        DifferentialState y;
        DifferentialState theta;

        Control u0; // velocity
        Control u1; // steering angle

        // Reference trajectory
        std::vector<std::vector<double>> ref_states;
        // std::vector<std::vector<double>> ref_controls;

        Grid timeGrid; ///< time grid
        VariablesGrid output_states; ///< Stores output states of optimization
        // VariablesGrid output_controls; ///< Stores output controls of optimization

        /* 
        *
        * Variable to keep track of the start index of 
        * the reference trajectory corresponding to 
        * time passed.
        *
        */
        int to = 0;

        /* Files to store the outputs of MPC*/
        std::ofstream output_file; // States found from optimization
        // std::ofstream achieved_file; // States actually acheived

        int prop_steps;
};

#endif // SIMPLE_CAR_MPC_H